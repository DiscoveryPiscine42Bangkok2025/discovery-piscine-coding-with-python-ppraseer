from typing import Iterable, List, Tuple

SUCCESS = "Success"
FAIL = "Fail"
def _normalize_board(board: Iterable[str]) -> List[str]:
if isinstance(board, str):
        lines = [ln.rstrip("\n") for ln in board.splitlines()]
    else:
        lines = [str(ln).rstrip("\n") for ln in board]
while lines and lines[0] == "":
        lines.pop(0)
    while lines and lines[-1] == "":
        lines.pop()

    if not lines:
        raise ValueError("Empty board.")

    n = len(lines[0])
    if any(len(ln) != n for ln in lines):
        raise ValueError("All rows must have the same length (square-ish).")
    if len(lines) != n:
        raise ValueError("Board must be N x N (square).")

    return lines


def _find_king(board: List[str]) -> Tuple[int, int]:
    pos = [ (r, c)
            for r, row in enumerate(board)
            for c, ch in enumerate(row)
            if ch == 'K' ]
    if len(pos) != 1:
        raise ValueError("There must be exactly one King (K).")
    return pos[0]


def _in_bounds(r: int, c: int, n: int) -> bool:
    return 0 <= r < n and 0 <= c < n


def checkmate(board: Iterable[str]) -> None:
 try:
        grid = _normalize_board(board)
        n = len(grid)
        kr, kc = _find_king(grid)
    except Exception:

 print(FAIL)
        return
for dc in (-1, 1):
        rr, cc = kr - 1, kc + dc
        if _in_bounds(rr, cc, n) and grid[rr][cc] == 'P':
            print(SUCCESS)
            return
 rook_dirs = [(1,0), (-1,0), (0,1), (0,-1)]
    for dr, dc in rook_dirs:
        r, c = kr + dr, kc + dc
        while _in_bounds(r, c, n):
            ch = grid[r][c]
            if ch != '.':
                if ch in ('R', 'Q'):
                    print(SUCCESS)
                    return
                break
            r += dr
            c += dc
 bishop_dirs = [(1,1), (1,-1), (-1,1), (-1,-1)]
    for dr, dc in bishop_dirs:
        r, c = kr + dr, kc + dc
        while _in_bounds(r, c, n):
            ch = grid[r][c]
            if ch != '.':
                if ch in ('B', 'Q'):
                    print(SUCCESS)
                    return
                break
            r += dr
            c += dc
 print(FAIL)
